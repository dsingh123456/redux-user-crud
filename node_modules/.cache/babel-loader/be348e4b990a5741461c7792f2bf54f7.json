{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const users = [{\n    id: 1,\n    name: \"deepak singh\",\n    address: \"Bihar,gaya\",\n    email: \"Singh@gmail.com\",\n    contact: 9654510879\n  }, {\n    id: 2,\n    name: \"Raushan\",\n    address: \"Noida, sector 19,UP\",\n    email: \"pksingh123@gmail.com\",\n    contact: 9854512879\n  }, {\n    id: 3,\n    name: \"Aman\",\n    Address: \"Chennai,vadapalani\",\n    email: \"asingh@gmail.com\",\n    contactNumber: 9654510879\n  }];\n  return users;\n});\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    entities: [],\n    loading: false\n  },\n  reducers: {\n    userAdded(state, action) {\n      state.entities.push(action.payload);\n    },\n\n    userUpdated(state, action) {\n      const {\n        id,\n        name,\n        email\n      } = action.payload;\n      const existingUser = state.entities.find(user => user.id === id);\n\n      if (existingUser) {\n        existingUser.name = name;\n        existingUser.email = email;\n      }\n    },\n\n    userDeleted(state, action) {\n      const {\n        id\n      } = action.payload;\n      const existingUser = state.entities.find(user => user.id === id);\n\n      if (existingUser) {\n        state.entities = state.entities.filter(user => user.id !== id);\n      }\n    }\n\n  },\n  extraReducers: {\n    [fetchUsers.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchUsers.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload];\n    },\n    [fetchUsers.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  userAdded,\n  userUpdated,\n  userDeleted\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"sources":["F:/redux/redux-user-crud/src/features/users/usersSlice.js"],"names":["createAsyncThunk","createSlice","fetchUsers","users","id","name","address","email","contact","Address","contactNumber","usersSlice","initialState","entities","loading","reducers","userAdded","state","action","push","payload","userUpdated","existingUser","find","user","userDeleted","filter","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\r\n  const users = [\r\n    {\r\n      id: 1,\r\n      name: \"deepak singh\",\r\n      address: \"Bihar,gaya\",\r\n      email: \"Singh@gmail.com\",\r\n      contact:9654510879,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Raushan\",\r\n      address: \"Noida, sector 19,UP\",\r\n      email: \"pksingh123@gmail.com\",\r\n      contact:9854512879,\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Aman\",\r\n      Address: \"Chennai,vadapalani\",\r\n      email: \"asingh@gmail.com\",\r\n      contactNumber:9654510879,\r\n    },\r\n  ];\r\n  return users;\r\n});\r\n\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState: {\r\n    entities: [],\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    userAdded(state, action) {\r\n      state.entities.push(action.payload);\r\n    },\r\n    userUpdated(state, action) {\r\n      const { id, name, email } = action.payload;\r\n      const existingUser = state.entities.find((user) => user.id === id);\r\n      if (existingUser) {\r\n        existingUser.name = name;\r\n        existingUser.email = email;\r\n      }\r\n    },\r\n    userDeleted(state, action) {\r\n      const { id } = action.payload;\r\n      const existingUser = state.entities.find((user) => user.id === id);\r\n      if (existingUser) {\r\n        state.entities = state.entities.filter((user) => user.id !== id);\r\n      }\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [fetchUsers.pending]: (state, action) => {\r\n      state.loading = true;\r\n    },\r\n    [fetchUsers.fulfilled]: (state, action) => {\r\n      state.loading = false;\r\n      state.entities = [...state.entities, ...action.payload];\r\n    },\r\n    [fetchUsers.rejected]: (state, action) => {\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { userAdded, userUpdated, userDeleted } = usersSlice.actions;\r\n\r\nexport default usersSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}